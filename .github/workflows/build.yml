name: Build Zed Stable

on:
  schedule:
    - cron: "0 */12 * * *"  # 每12小时触发一次
  push:
    tags:
      - 'v*.*.*'  # 仅当创建符合稳定版命名规则的新标签时触发

jobs:
  check-and-trigger:
    runs-on: ubuntu-22.04  # 显式指定 Ubuntu 22.04
    outputs:
      trigger_build: ${{ steps.compare_tags.outputs.trigger_build }}
      latest_tag: ${{ steps.compare_tags.outputs.latest_tag }}  # 输出 LATEST_TAG
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest stable tag from Zed Industries
        id: get_latest_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/zed-industries/zed/releases/latest | jq -r '.tag_name')
          if [ -z "$latest_tag" ]; then
            echo "Failed to get latest tag"
            exit 1
          fi
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest stable tag: $latest_tag"

      - name: Download last known tag
        uses: actions/download-artifact@v4
        with:
          name: last_known_tag.txt
          path: .

      - name: Compare with last known tag
        id: compare_tags
        run: |
          if [ -f last_known_tag.txt ]; then
            last_known_tag=$(cat last_known_tag.txt)
          else
            last_known_tag=""
          fi
          echo "Last known tag: $last_known_tag"
          echo "Latest tag: ${{ env.LATEST_TAG }}"

          if [ "$last_known_tag" != "${{ env.LATEST_TAG }}" ]; then
            echo "trigger_build=true" >> $GITHUB_OUTPUT
            echo "latest_tag=${{ env.LATEST_TAG }}" >> $GITHUB_OUTPUT  # 输出 LATEST_TAG
          else
            echo "trigger_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Save latest tag
        run: |
          echo "${{ env.LATEST_TAG }}" > last_known_tag.txt

      - name: Upload last known tag
        uses: actions/upload-artifact@v4
        with:
          name: last_known_tag.txt
          path: last_known_tag.txt

  build:
    needs: check-and-trigger
    if: ${{ needs.check-and-trigger.outputs.trigger_build == 'true' }}  # 仅在需要时触发构建
    runs-on: windows-latest
    strategy:
      matrix:
        backend: [vulkan, opengl]
        include:
          - backend: vulkan
            artifact_name: zed-release
            rustflags: ""
          - backend: opengl
            artifact_name: zed-release-opengl
            rustflags: "--cfg gles"

    steps:
      - name: Enable long paths in Git
        run: |
          git config --system core.longpaths true

      - name: Enable long paths in Windows
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Checkout Zed repository
        uses: actions/checkout@v3
        with:
          repository: zed-industries/zed
          ref: ${{ needs.check-and-trigger.outputs.latest_tag }}  # 使用最新的稳定版标签

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          key: ${{ matrix.backend }}-stable-${{ hashFiles('**/Cargo.lock') }}  # 缓存键包含 Cargo.lock 的哈希值
          restore-keys: |
            ${{ matrix.backend }}-stable-

      - name: Build release
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: cargo build --release --jobs 2  # 启用并行编译

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release/zed.exe

  release:
    needs: build
    runs-on: ubuntu-22.04  # 显式指定 Ubuntu 22.04
    permissions:
      contents: write

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get the current tag name
        id: tag
        run: echo "TAG_NAME=${{ needs.check-and-trigger.outputs.latest_tag }}" >> $GITHUB_ENV

      - name: Create release directories and zip
        run: |
          mkdir -p zed-release zed-release-opengl
          mv artifacts/zed-release/zed.exe zed-release/
          mv artifacts/zed-release-opengl/zed.exe zed-release-opengl/
          zip -r zed-windows-${{ env.TAG_NAME }}.zip zed-release/*
          zip -r zed-windows-opengl-${{ env.TAG_NAME }}.zip zed-release-opengl/*

      - name: Upload release build artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          make_latest: true
          files: |
            zed-windows-${{ env.TAG_NAME }}.zip
            zed-windows-opengl-${{ env.TAG_NAME }}.zip