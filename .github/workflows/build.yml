name: Build Zed Stable

on:
  schedule:
    - cron: "0 */12 * * *" # Runs every 12 hours
  push:
    branches:
      - main

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-latest-release.outputs.version }}
      should-build: ${{ steps.check-release.outputs.should-build }}
    steps:
      - name: Get latest release version
        id: get-latest-release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/zed-industries/zed/releases/latest | jq -r '.tag_name')
          echo "Latest release version: $LATEST_RELEASE"
          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check-release
        run: |
          # Get the latest release version from the previous step
          LATEST_RELEASE=${{ steps.get-latest-release.outputs.version }}

          # Check if a release with this version already exists
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$LATEST_RELEASE)
          if [[ "$RELEASE_EXISTS" == "200" ]]; then
            echo "Release $LATEST_RELEASE already exists. Skipping build."
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "Release $LATEST_RELEASE does not exist. Proceeding with build."
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: windows-latest
    needs: get-version
    if: needs.get-version.outputs.should-build == 'true'
    steps:
      - name: Enable long paths in Git
        run: |
          git config --system core.longpaths true

      - name: Enable long paths in Windows
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: zed-industries/zed
          ref: main

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          override: true
          target: wasm32-wasip1

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3

      - name: Build release
        run: cargo build --release

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: zed-release
          path: target/release/zed.exe

  release:
    runs-on: ubuntu-latest
    needs: [get-version, build]
    if: needs.get-version.outputs.should-build == 'true'
    permissions:
      contents: write

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release directory and zip
        run: |
          mkdir -p zed-release
          mv artifacts/zed-release/zed.exe zed-release/
          zip -r zed-windows-stable-${{ needs.get-version.outputs.version }}.zip zed-release/*

      - name: Upload release build artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Stable Release ${{ needs.get-version.outputs.version }}
          tag_name: ${{ needs.get-version.outputs.version }}
          draft: false
          make_latest: true
          files: |
            zed-windows-stable-${{ needs.get-version.outputs.version }}.zip