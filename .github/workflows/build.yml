name: Build Zed Stable

on:
  schedule:
    - cron: "0 */12 * * *"  # 每12小时触发一次
  push:
    tags:
      - 'v*.*.*'  # 仅当创建符合稳定版命名规则的新标签时触发

jobs:
  check-and-trigger:
    runs-on: ubuntu-22.04  # 显式指定 Ubuntu 22.04
    permissions:
      contents: write  # 允许推送代码
    outputs:
      trigger_build: ${{ steps.compare_tags.outputs.trigger_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest stable tag from Zed Industries
        id: get_latest_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/zed-industries/zed/releases/latest | jq -r '.tag_name')
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest stable tag: $latest_tag"

      - name: Compare with last known tag
        id: compare_tags
        run: |
          if [ -f last_known_tag.txt ]; then
            last_known_tag=$(cat last_known_tag.txt)
          else
            last_known_tag=""
          fi
          echo "Last known tag: $last_known_tag"
          echo "Latest tag: ${{ env.LATEST_TAG }}"

          if [ "$last_known_tag" != "${{ env.LATEST_TAG }}" ]; then
            echo "trigger_build=true" >> $GITHUB_OUTPUT  # 使用环境文件设置输出
          else
            echo "trigger_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Save latest tag
        run: |
          echo "${{ env.LATEST_TAG }}" > last_known_tag.txt
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b update-tag  # 创建并切换到临时分支
          git add last_known_tag.txt
          git commit -m "Update last known tag"
          git push origin update-tag  # 推送到临时分支

      - name: Clean up temporary branch (optional)
        run: |
          git push origin --delete update-tag

  build:
    needs: check-and-trigger
    if: ${{ needs.check-and-trigger.outputs.trigger_build == 'true' }}  # 仅在需要时触发构建
    runs-on: windows-latest
    strategy:
      matrix:
        backend: [vulkan, opengl]
        include:
          - backend: vulkan
            artifact_name: zed-release
            rustflags: ""
          - backend: opengl
            artifact_name: zed-release-opengl
            rustflags: "--cfg gles"

    steps:
      - name: Enable long paths in Git
        run: |
          git config --system core.longpaths true

      - name: Enable long paths in Windows
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Checkout Zed repository
        uses: actions/checkout@v3
        with:
          repository: zed-industries/zed
          ref: ${{ env.LATEST_TAG }}  # 使用